<?php

namespace Autoframe\Database\Orm\Action;

use Autoframe\Database\Connection\Exception\AfrDatabaseConnectionException;

interface PdoInteractInterface extends EscapeInterface
{

	/** alias for manyQuery
	 *
	 * @param string $sQuery
	 * @return array
	 * @throws AfrDatabaseConnectionException
	 */
	public function getRow(string $sQuery): array;

	/**
	 * alias for getRow
	 * @param string $sQuery
	 * @return array
	 * @throws AfrDatabaseConnectionException
	 */
	public function manyQuery(string $sQuery): array;

	///////////////////////////////////////////////

	/**
	 * alis for multipleQuery
	 *
	 * @param string $sQuery
	 * @param string $sIndexColumn
	 * @return array
	 * @throws AfrDatabaseConnectionException
	 */
	public function getAllRows(string $sQuery, string $sIndexColumn = 'id'): array;

	/**
	 * alias for getAllRows
	 * @param string $sQuery
	 * @param string $sIndexColumn
	 * @return array
	 * @throws AfrDatabaseConnectionException
	 */
	public function multipleQuery(string $sQuery, string $sIndexColumn = 'id'): array;

	///////////////////////////////////////////////


	/**
	 * alias for oneQuery
	 * @param string $sQuery
	 * @return string|int|float|null|mixed
	 * @throws AfrDatabaseConnectionException
	 */
	public function getCell(string $sQuery);


	/**
	 * alias for getCell
	 * @param string $sQuery
	 * @return string|int|float|null|mixed
	 * @throws AfrDatabaseConnectionException
	 */
	public function oneQuery(string $sQuery);


	///////////////////////////////////////////////

	/**
	 * alias for getAllCells
	 * Retrieves multiple rows having a single value for each row
	 * Same as array values or oneMultipleQuery
	 *
	 * @param string $sQuery
	 * @return array
	 * @throws AfrDatabaseConnectionException
	 */
	public function oneRowsQuery(string $sQuery): array;

	/**
	 * alias for oneRowsQuery
	 * @param string $sQuery
	 * @return array
	 * @throws AfrDatabaseConnectionException
	 */
	public function getAllCells(string $sQuery): array;





	//////////////////////////////////////////

	/**
	 * alias for sql_query()
	 * @param string $sQuery
	 * @return false|int
	 * @throws AfrDatabaseConnectionException
	 */
	public function execPdoStatement(string $sQuery);


	////////////////////////////////////


	/**
	 * @param string|null $sDatabaseName
	 * @throws AfrDatabaseConnectionException
	 */
	public function setDefaultDatabase(string $sDatabaseName = null): void;

	/**
	 * @return string|null
	 */
	public function getDefaultDatabaseName(): ?string;


	/////////////////////////////////////

	/**
	 * @param string $sQuery
	 * @return int
	 * @throws AfrDatabaseConnectionException
	 */
	public function countQuery(string $sQuery): int;

	public function many_qa(string $tablename, array $where, $return_query = false);


	/**
	 * @param string $sQuery
	 * @param bool $bReturnTableAutoIncrement PDO::lastInsertId does NOT return the autogenerated id of the last row on multiple row inserts
	 * @return int PDO::lastInsertId() mysql_insert_id
	 */
	public function insertQuery(string $sQuery, bool $bReturnTableAutoIncrement = false): ?int;


	public function insertQa(string $tablename, $a, $keys_to_exclude = array('id'), $setify_only_keys = array(), $return_query = false): ?int;

	function insert_update($tablename, $a, $keys_to_exclude = array('id'), $setify_only_keys = array(), $return_query = false);

	public function update_query($sQuery);

	public function update_qa($tablename, $a, $where, $limit = 'LIMIT 1', $return_query = false);

	function update_qaf($tablename, $a, $where, $limit = 'LIMIT 1', $keys_to_exclude = array('id'), $setify_only_keys = array(), $return_query = false);
//    { $a = form_data_prepare($tablename, $a, $keys_to_exclude, $setify_only_keys);
//        return update_qa($tablename, $a, $where, $limit, $return_query);}

	function delete_query(string $sQuery);

	function setify_query(array $a, $set = ' SET ');


	function mysql_insert_id($x): ?int;

	function mysql_affected_rows($x): ?int;


	///////////////////////////////////////////
	public static function rowToArray($objOrArr): array;

	public static function rowsToArray($traversable): array;

	public static function rowToStdClass($objOrArr): object;

	public static function rowsToStdClass($traversable, bool $bReference = true);
}